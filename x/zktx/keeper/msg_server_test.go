package keeper_test

import (
	"bytes"
	"crypto/rand"
	"encoding/json"
	"fmt"
	"testing"

	"github.com/hyle/hyle/zktx"
	"github.com/hyle/hyle/zktx/keeper"
	"github.com/stretchr/testify/require"

	tedwards "github.com/consensys/gnark-crypto/ecc/twistededwards"
	"github.com/consensys/gnark-crypto/hash"
	cryptoeddsa "github.com/consensys/gnark-crypto/signature/eddsa"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"
	"github.com/consensys/gnark/std/algebra/native/twistededwards"
	"github.com/consensys/gnark/std/hash/mimc"
	"github.com/consensys/gnark/std/signature/eddsa"
)

func TestUpdateParams(t *testing.T) {
	f := initFixture(t)
	require := require.New(t)

	testCases := []struct {
		name         string
		request      *zktx.MsgUpdateParams
		expectErrMsg string
	}{
		{
			name: "set invalid authority (not an address)",
			request: &zktx.MsgUpdateParams{
				Authority: "foo",
			},
			expectErrMsg: "invalid authority address",
		},
		{
			name: "set invalid authority (not defined authority)",
			request: &zktx.MsgUpdateParams{
				Authority: f.addrs[1].String(),
			},
			expectErrMsg: fmt.Sprintf("unauthorized, authority does not match the module's authority: got %s, want %s", f.addrs[1].String(), f.k.GetAuthority()),
		},
		{
			name: "set valid params",
			request: &zktx.MsgUpdateParams{
				Authority: f.k.GetAuthority(),
				Params:    zktx.Params{},
			},
			expectErrMsg: "",
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			_, err := f.msgServer.UpdateParams(f.ctx, tc.request)
			if tc.expectErrMsg != "" {
				require.Error(err)
				require.ErrorContains(err, tc.expectErrMsg)
			} else {
				require.NoError(err)
			}
		})
	}
}

// From the GNARK EDDSA playground

// gnark is a zk-SNARK library written in Go. Circuits are regular structs.
// The inputs must be of type frontend.Variable and make up the witness.
// The witness has a
//   - secret part --> known to the prover only
//   - public part --> known to the prover and the verifier
type Circuit struct {
	PublicKey eddsa.PublicKey   `gnark:",public"`
	Signature eddsa.Signature   `gnark:",public"`
	Message   frontend.Variable `gnark:",public"`
}

// Define declares the circuit logic. The compiler then produces a list of constraints
// which must be satisfied (valid witness) in order to create a valid zk-SNARK
// This circuit verifies an EdDSA signature.
func (circuit *Circuit) Define(api frontend.API) error {
	// set the twisted edwards curve to use
	curve, err := twistededwards.NewEdCurve(api, tedwards.BN254)
	if err != nil {
		return err
	}

	// hash function
	mimc, err := mimc.NewMiMC(api)
	if err != nil {
		return err
	}

	// tip: gnark profiles enable circuit developers to measure the number of constraints
	// generated by a part of the (or the entire) circuit, using pprof.
	// see github.com/consensys/gnark/profile

	// verify the EdDSA signature
	eddsa.Verify(curve, circuit.Signature, circuit.Message, circuit.PublicKey, &mimc)

	// tip: api.Println behaves like go fmt.Println but accepts frontend.Variable
	// that are resolved at Proving time
	api.Println("message", circuit.Message)

	return nil
}

func main() (keeper.Groth16Proof, error) {
	// instantiate hash function
	hFunc := hash.MIMC_BN254.New()

	// create a eddsa key pair
	privateKey, _ := cryptoeddsa.New(tedwards.BN254, rand.Reader)
	publicKey := privateKey.Public()

	// note that the message is on 4 bytes
	msg := []byte("00000000000000000000000000000001")

	// sign the message
	signature, err := privateKey.Sign(msg, hFunc)

	// verifies signature
	isValid, _ := publicKey.Verify(signature, msg, hFunc)
	if !isValid {
		return keeper.Groth16Proof{}, fmt.Errorf("invalid signature")
	}

	var circuit Circuit
	fid, _ := twistededwards.GetSnarkField(tedwards.BN254)
	r1cs, err := frontend.Compile(fid, r1cs.NewBuilder, &circuit)

	// generating pk, vk
	pk, vk, err := groth16.Setup(r1cs)

	// declare the witness
	var assignment Circuit

	// assign message value
	assignment.Message = msg

	// public key bytes
	_publicKey := publicKey.Bytes()

	// assign public key values
	assignment.PublicKey.Assign(tedwards.BN254, _publicKey[:32])

	// assign signature values
	assignment.Signature.Assign(tedwards.BN254, signature)

	// witness
	witness, err := frontend.NewWitness(&assignment, fid)
	publicWitness, err := witness.Public()
	// generate the proof
	proof, err := groth16.Prove(r1cs, pk, witness)

	// verify the proof
	err = groth16.Verify(proof, vk, publicWitness)
	if err != nil {
		return keeper.Groth16Proof{}, err
	}

	var proofBuf bytes.Buffer
	proof.WriteTo(&proofBuf)
	var vkBuf bytes.Buffer
	vk.WriteTo(&vkBuf)
	var publicWitnessBuf bytes.Buffer
	publicWitness.WriteTo(&publicWitnessBuf)
	return keeper.Groth16Proof{
		Proof:         proofBuf.Bytes(),
		VerifyingKey:  vkBuf.Bytes(),
		PublicWitness: publicWitnessBuf.Bytes(),
	}, nil
}

func TestExecuteStateChangeGroth16(t *testing.T) {
	f := initFixture(t)
	require := require.New(t)

	// Register the contract (TODO)
	contract := zktx.Contract{
		Verifier:    "groth16-twistededwards-BN254",
		StateDigest: []byte("initial_state"),
	}

	// set the contract state
	err := f.k.Contracts.Set(f.ctx, f.addrs[0].String(), contract)
	require.NoError(err)

	// create an array of bytes
	proof, _ := main()
	jsonproof, _ := json.Marshal(proof)

	// create a message
	msg := &zktx.MsgExecuteStateChange{
		ContractName: f.addrs[0].String(),
		Proof:        jsonproof,
		InitialState: []byte("initial_state"),
		FinalState:   []byte("final_state"),
	}

	// execute the message
	_, err = f.msgServer.ExecuteStateChange(f.ctx, msg)
	require.NoError(err)

	st, _ := f.k.Contracts.Get(f.ctx, f.addrs[0].String())
	require.Equal(st.StateDigest, []byte("final_state"))
}
