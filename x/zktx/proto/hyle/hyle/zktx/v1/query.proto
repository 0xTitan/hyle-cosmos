syntax = "proto3";
package hyle.hyle.zktx.v1;

option go_package = "github.com/hyle/hyle/zktx";

// import "cosmos/base/query/v1beta1/pagination.proto";
import "hyle/hyle/zktx/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Query {
  // ContractState returns the current state of the contract.
  rpc ContractState(ContractStateRequest) returns (ContractStateResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/hyle/hyle/zktx/v1/contract_state/{contract_address}";
  }

  // // Counter returns the current counter value.
  // rpc Counter(QueryCounterRequest) returns (QueryCounterResponse) {
  //   option (cosmos.query.v1.module_query_safe) = true;
  //   option (google.api.http).get = "/hyle/hyle/zktx/v1/counter/{address}";
  // }

  // // Counters returns all the counter values.
  // rpc Counters(QueryCountersRequest) returns (QueryCountersResponse) {
  //   option (cosmos.query.v1.module_query_safe) = true;
  //   option (google.api.http).get = "/hyle/hyle/zktx/v1/counters";
  // }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hyle/hyle/zktx/v1/params";
  }
}

// ContractStateRequest is the request type for the Query/ContractState RPC
message ContractStateRequest {
  // contract_address defines the address to query for the contract state.
  string contract_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// ContractStateResponse is the response type for the Query/ContractState RPC
message ContractStateResponse {
  // state defines the current state of the contract.
  hyle.zktx.v1.ContractState state = 1 [ (gogoproto.nullable) = false ];
}

// // QueryCounterRequest is the request type for the Query/Counter RPC
// // method.
// message QueryCounterRequest {
//   // address defines the address to query for the counter.
//   string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
// }

// // QueryCounterResponse is the response type for the Query/Counter RPC
// // method.
// message QueryCounterResponse {
//   // counter defines the current counter for the sender.
//   uint64 counter = 1;
// }

// // QueryCountersResponse is the request type for the Query/Counters RPC
// message QueryCountersRequest {
//   // pagination defines an optional pagination for the request.
//   cosmos.base.query.v1beta1.PageRequest pagination = 1;
// }

// // QueryCountersResponse is the response type for the Query/Counters RPC
// // method.
// message QueryCountersResponse {
//   // counters defines all the counters in the store.
//   repeated Counter counters = 1;

//   // pagination defines the pagination in the response.
//   cosmos.base.query.v1beta1.PageResponse pagination = 2;
// }

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
